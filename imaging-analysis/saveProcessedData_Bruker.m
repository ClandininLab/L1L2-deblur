% saveProcessedData_Bruker.m
% 
% Saves the struct pDat into the time series (LDM) directory, named as the
%  name of that folder with _pData appended.
% pDat contains processed time series data, including essential 
%  information about the time series, ROI data, and stimulus metadata. 
% Also saves stimulus information in the stimulus struct into the pDat
%  struct and removes full image series, aligned and unaligned, to save 
%  space, as they're already saved in imDat.mat.
% For Bruker data format, just removes fly name
% 
% Struct contents of pDat:
%   fileloc - path to the time series folder
%   flyName - name of the fly
%   seriesName - name of time series (e.g. LDM_001)
%   avgIm - 2D array of the image averaged over the whole time series
%   nFrames - the number of imaging frames in the time series
%   xPixels - the number of pixels in the x dimension in each frame
%       (corresponds to fast galvo when imaging)
%   yPixels - the number of pixels in the y dimension in each frame
%       (corresponds to the slow galvo when imaging, will be <= xPixels)
%   roiMasks - cell array of logicals (yPixels x xPixels), one per ROI (1
%       if pixel is in ROI, 0 elsewhere)
%   nMasks - number of masks in roiMasks, equals number of ROIs
%   bkMask - logical for background region (1 in background, 0 elsewhere)
%   avSignal - average fluorescence over time for each ROI
%   dSignal - average background subtracted fluorescence over time for each
%       ROI
%   imFrameStartTimes - time at which each imaging frame was captured
%   imIFI - imaging interframe interval
%   pStimDat - struct of processed stimulus data (generated by the function
%           getImFrameStimVal)
%       stimvalIF - stimulus value at each imaging frame, for prelim 
%            plotting
%       stimEpochTimesIF - stimulus times for each of those stimulus 
%           values, again for prelim plotting
%       rcStim - reconstructed stimulus value on each epoch
%       rcStimInd - reconstructed order of epochs
%       stimEpochStartTimes - times of dark to light as well as light to
%           dark transitions (sorted concatenation of lightStartTimes and
%           darkStartTimes)
%        lightStartTimes - times of dark to light transitions
%       darkStartTimes - times of light to dark transitions
%       pdThresh - threshold voltage to separate light from dark in 
%           photodiode output
%   ID - full name of time series (e.g. 161204_fly1_LDM_001)
%   stimDat - stimulus struct, contains only obj, the Stimulus object saved
%       when the imaging was done
% 
% INPUT:
%   pDat - struct of processed time series data
%   stimStruct - stimulus struct (saved as stimDat into pDat)
%
% OUTPUT:
%   none but saves pDat into LDM folder
%

function saveProcessedData_Bruker(pDat, stimStruct)

    curDir = pwd;
    cd(pDat.fileloc);

    % create a time series ID
    pDat.ID = pDat.seriesName;

    % remove fields corresponding to full image series, aligned and
    %  unaligned (file is too large otherwise and can be found in
    %  imDat.mat)
    if (isfield(pDat, 'alSeries'))
        pDat = rmfield(pDat, 'alSeries');
        pDat = rmfield(pDat, 'unSeries');
    end 

    % save stimulus data into the pData struct along with the imaging data
    pDat.stimDat = stimStruct; 

    pathroot = pDat.fileloc;
    f = find((pathroot == '\') + (pathroot == '/'));
    f = f(end);
    pathroot = pathroot((f+1):end); 

    save([pathroot '_pData.mat'], 'pDat'); % processed data

    disp('Saved!');

    cd(curDir);

end 